name: Firebase Deploy

on:
  push:
    branches: [main, dev]

jobs:
  changes:
    name: üß† Analyze Changes
    runs-on: ubuntu-latest
    outputs:
      hosting: ${{ steps.filter.outputs.hosting || 'false' }}
      functions: ${{ steps.filter.outputs.functions || 'false' }}
      firestore: ${{ steps.filter.outputs.firestore || 'false' }}
      database: ${{ steps.filter.outputs.database || 'false' }}
      storage: ${{ steps.filter.outputs.storage || 'false' }}
    steps:
      - uses: actions/checkout@v3

      - name: Filter Changed Files
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            hosting:
              - 'web/**'
            functions:
              - 'functions/**'
            firestore:
              - 'firestore.rules'
            database:
              - 'database.rules.json'
            storage:
              - 'storage.rules'

      - name: Debug paths filter output
        run: |
          echo "Hosting: ${{ steps.filter.outputs.hosting }}"
          echo "Functions: ${{ steps.filter.outputs.functions }}"
          echo "Firestore: ${{ steps.filter.outputs.firestore }}"
          echo "Database: ${{ steps.filter.outputs.database }}"
          echo "Storage: ${{ steps.filter.outputs.storage }}"

  # setup:
  #   name: üîê Set Up Credentials
  #   runs-on: ubuntu-latest
  #   outputs:
  #     creds-path: ${{ steps.write-creds.outputs.creds-path }}
  #   steps:
  #     - name: Write service account credentials
  #       id: write-creds
  #       run: |
  #         echo -e "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > ${{ github.workspace }}/firebase-creds.json
  #         echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/firebase-creds.json" >> $GITHUB_ENV
  #         echo "creds-path=${{ github.workspace }}/firebase-creds.json" >> $GITHUB_OUTPUT

  #         echo "üîç Dumping service account JSON (for debug only):"
  #         head -n 5 ${{ github.workspace }}/firebase-creds.json

  deploy-hosting:
    name: üöÄ Deploy Hosting
    needs: changes
    if: needs.changes.outputs.hosting == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # - name: Write Firebase credentials
      #   run: |
      #     echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > firebase-creds.json
      #     echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/firebase-creds.json" >> $GITHUB_ENV

      # Cache root node_modules
      - name: Cache root node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Cache web node_modules
      - name: Cache web/node_modules
        uses: actions/cache@v3
        with:
          path: web/node_modules
          key: ${{ runner.os }}-web-node-${{ hashFiles('web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-web-node-

      - uses: actions/setup-node@v3
        with:
          node-version: "20"

      - run: |
          npm install
          npm install --prefix web
          npm run build --prefix web

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@14.10.1

      - name: Deploy Hosting
        run: |
          firebase deploy \
          --only hosting \
          --project "${{ secrets.FIREBASE_PROJECT_ID }}" \
          --token "${{ secrets.FIREBASE_AUTH_TOKEN }}"

  deploy-functions:
    name: ‚öôÔ∏è Deploy Functions
    needs: changes
    if: needs.changes.outputs.functions == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # - name: Write Firebase credentials
      #   run: |
      #     echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > firebase-creds.json
      #     echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/firebase-creds.json" >> $GITHUB_ENV

      # Cache root node_modules
      - name: Cache root node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Cache functions/node_modules
      - name: Cache functions/node_modules
        uses: actions/cache@v3
        with:
          path: functions/node_modules
          key: ${{ runner.os }}-functions-node-${{ hashFiles('functions/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-functions-node-

      - uses: actions/setup-node@v3
        with:
          node-version: "20"

      - run: |
          npm install
          npm install --prefix functions

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@14.10.1

      - name: Deploy Functions
        run: |
          firebase deploy \
          --only functions \
          --project "${{ secrets.FIREBASE_PROJECT_ID }}"
          --token "${{ secrets.FIREBASE_AUTH_TOKEN }}"

  deploy-firestore:
    name: üîê Deploy Firestore Rules
    needs: changes
    if: needs.changes.outputs.firestore == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # - name: Write Firebase credentials
      #   run: |
      #     echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > firebase-creds.json
      #     echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/firebase-creds.json" >> $GITHUB_ENV

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@14.10.1

      - name: Deploy Firestore Rules
        run: |
          firebase deploy \
          --only firestore:rules \
          --project "${{ secrets.FIREBASE_PROJECT_ID }}" \
          --token "${{ secrets.FIREBASE_AUTH_TOKEN }}"

  deploy-database:
    name: üìò Deploy Realtime DB Rules
    needs: changes
    if: needs.changes.outputs.database == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # - name: Write Firebase credentials
      #   run: |
      #     echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > firebase-creds.json
      #     echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/firebase-creds.json" >> $GITHUB_ENV

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@14.10.1

      - name: Deploy Realtime DB Rules
        run: |
          firebase deploy \
          --only database:rules \
          --project "${{ secrets.FIREBASE_PROJECT_ID }}" \
          --token "${{ secrets.FIREBASE_AUTH_TOKEN }}"

  deploy-storage:
    name: üóÇ Deploy Storage Rules
    needs: changes
    if: needs.changes.outputs.storage == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # - name: Write Firebase credentials
      #   run: |
      #     echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > firebase-creds.json
      #     echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/firebase-creds.json" >> $GITHUB_ENV

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@14.10.1

      - name: Deploy Storage Rules
        run: |
          firebase deploy \
          --only storage:rules \
          --project "${{ secrets.FIREBASE_PROJECT_ID }}" \
          --token "${{ secrets.FIREBASE_AUTH_TOKEN }}"

  deploy-preview:
    name: üåê Deploy Preview Hosting
    needs: changes
    if: github.ref == 'refs/heads/dev' && needs.changes.outputs.hosting == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # - name: Write Firebase credentials
      #   run: |
      #     echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > firebase-creds.json
      #     echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/firebase-creds.json" >> $GITHUB_ENV

      # Cache root node_modules
      - name: Cache root node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Cache web/node_modules
      - name: Cache web/node_modules
        uses: actions/cache@v3
        with:
          path: web/node_modules
          key: ${{ runner.os }}-web-node-${{ hashFiles('web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-web-node-

      - uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Build production web files
        run: |
          npm install
          npm install --prefix web
          npm run build --prefix web

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@14.10.1

      - name: Deploy to Preview Channel
        id: preview-deploy
        run: |
          firebase hosting:channel:deploy dev \
            --project "${{ secrets.FIREBASE_PROJECT_ID }}" \
            --expires 7d \
            --token "${{ secrets.FIREBASE_AUTH_TOKEN }}"

          echo "‚úÖ Finished deploy command"

      #   run: |
      #     npm install -g firebase-tools@14.10.1

      #     # Run deploy and capture output to a temp file
      #     set -o pipefail
      #     firebase hosting:channel:deploy dev \
      #       --project "${{ secrets.FIREBASE_PROJECT_ID }}" \
      #       --expires 7d > output.log 2>&1

      #     echo "=== Firebase CLI Output ==="
      #     cat output.log

      #     # Attempt to parse the preview URL
      #     if jq -e . output.log >/dev/null 2>&1; then
      #       PREVIEW_URL=$(jq -r '.result.previewUrl' output.log)
      #       echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
      #     else
      #       echo "‚ùå Could not parse preview URL. Here's the output:"
      #       cat output.log
      #       exit 1
      #     fi

      # - name: Show preview URL
      #   run: 'echo "Preview URL: ${{ steps.preview-deploy.outputs.preview_url }}"'
