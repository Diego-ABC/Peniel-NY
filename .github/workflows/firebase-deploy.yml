name: Firebase Deploy

on:
  push:
    branches: [main, dev]

jobs:
  changes:
    name: 🧠 Analyze Changes
    runs-on: ubuntu-latest
    outputs:
      hosting: ${{ steps.filter.outputs.hosting }}
      functions: ${{ steps.filter.outputs.functions }}
      firestore: ${{ steps.filter.outputs.firestore }}
      database: ${{ steps.filter.outputs.database }}
      storage: ${{ steps.filter.outputs.storage }}
    steps:
      - uses: actions/checkout@v3

      - name: Filter Changed Files
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            hosting:
              - 'web/**'
            functions:
              - 'functions/**'
            firestore:
              - 'firestore.rules'
            database:
              - 'database.rules.json'
            storage:
              - 'storage.rules'

  setup:
    name: 🔐 Set Up Credentials
    runs-on: ubuntu-latest
    outputs:
      creds-file: ${{ steps.write-creds.outputs.creds-file }}
    steps:
      - name: Write service account credentials
        id: write-creds
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > ${{ github.workspace }}/firebase-creds.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/firebase-creds.json" >> $GITHUB_ENV
          echo "creds-file=${{ github.workspace }}/firebase-creds.json" >> $GITHUB_OUTPUT

  deploy-hosting:
    name: 🚀 Deploy Hosting
    needs: [changes, setup]
    if: needs.changes.outputs.hosting == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Cache root node_modules
      - name: Cache root node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Cache web node_modules
      - name: Cache web/node_modules
        uses: actions/cache@v3
        with:
          path: web/node_modules
          key: ${{ runner.os }}-web-node-${{ hashFiles('web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-web-node-

      - uses: actions/setup-node@v3
        with:
          node-version: "20"

      - run: |
          npm install
          npm install --prefix web
          npm run build --prefix web

      - name: Deploy Hosting
        run: |
          npm install -g firebase-tools
          firebase deploy --only hosting --project "${{ secrets.FIREBASE_PROJECT_ID }}"

  deploy-functions:
    name: ⚙️ Deploy Functions
    needs: [changes, setup]
    if: needs.changes.outputs.functions == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Cache root node_modules
      - name: Cache root node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Cache functions/node_modules
      - name: Cache functions/node_modules
        uses: actions/cache@v3
        with:
          path: functions/node_modules
          key: ${{ runner.os }}-functions-node-${{ hashFiles('functions/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-functions-node-

      - uses: actions/setup-node@v3
        with:
          node-version: "20"

      - run: |
          npm install
          npm install --prefix functions

      - name: Deploy Functions
        run: |
          npm install -g firebase-tools
          firebase deploy --only functions --project "${{ secrets.FIREBASE_PROJECT_ID }}"

  deploy-firestore:
    name: 🔐 Deploy Firestore Rules
    needs: [changes, setup]
    if: needs.changes.outputs.firestore == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Deploy Firestore Rules
        run: |
          npm install -g firebase-tools
          firebase deploy --only firestore:rules --project "${{ secrets.FIREBASE_PROJECT_ID }}"

  deploy-database:
    name: 📘 Deploy Realtime DB Rules
    needs: [changes, setup]
    if: needs.changes.outputs.database == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Deploy Realtime DB Rules
        run: |
          npm install -g firebase-tools
          firebase deploy --only database:rules --project "${{ secrets.FIREBASE_PROJECT_ID }}"

  deploy-storage:
    name: 🗂 Deploy Storage Rules
    needs: [changes, setup]
    if: needs.changes.outputs.storage == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Deploy Storage Rules
        run: |
          npm install -g firebase-tools
          firebase deploy --only storage:rules --project "${{ secrets.FIREBASE_PROJECT_ID }}"

  deploy-preview:
    name: 🌐 Deploy Preview Hosting
    needs: [changes, setup]
    if: github.ref == 'refs/heads/dev' && needs.changes.outputs.hosting == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Cache root node_modules
      - name: Cache root node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Cache web/node_modules
      - name: Cache web/node_modules
        uses: actions/cache@v3
        with:
          path: web/node_modules
          key: ${{ runner.os }}-web-node-${{ hashFiles('web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-web-node-

      - uses: actions/setup-node@v3
        with:
          node-version: "20"

      - run: |
          npm install
          npm install --prefix web
          npm run build --prefix web

      - name: Deploy to Preview Channel
        id: preview-deploy
        run: |
          npm install -g firebase-tools
          firebase hosting:channel:deploy dev \
            --project "${{ secrets.FIREBASE_PROJECT_ID }}" \
            --expires 7d > result.json 2>&1
          cat result.json
          # Try parsing only if result contains JSON-looking output
          if jq -e . result.json >/dev/null 2>&1; then
            PREVIEW_URL=$(jq -r '.result.previewUrl' result.json)
            echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          else
            echo "Failed to parse result.json. Contents:"
            cat result.json
            exit 1
          fi

      - name: Show preview URL
        run: 'echo "Preview URL: ${{ steps.preview-deploy.outputs.preview_url }}"'
